红黑树旋转插入规则(假设当前需要操作的节点为: n):
 - 前二层节点很好判断, 这里不多说. (注意固定规则: 1. 红黑树不管是旋转还是变色或者叔叔是红色还是黑色, 如果上级为黑色.结束  2. 旋转最多2次  3. 操作旋转的时候千万要正确关联上下级且要释放之前子级所在父级的位置,不然可能就会出现死循环的情况)
 - 变色规则(优先处理变色情况): 
	条件1: 如果两个连续的子节点都为红色, 且父级节点和叔叔节点为红色, 则父级节点和叔叔节点及爷爷节点变换颜色. 
	        - 如果上级节点还为红色, 继续向上检查:
		    - 如果叔叔节点也为红色, 再变色, 一直到根, 最后把根再次变回黑色, 结束.
		    - 如果叔叔节点为黑色, 则按下面的旋转规则操作(注意: 此时的旋转节点变为n节点的爷爷节点与太爷爷节点的旋转操作)
	条件2: 变色检查到如果父节点是根是黑色并且叔叔节点也是黑色, 结束. 

 - 旋转规则:
	条件1: 如果两个连续的子节点都为红色且叔叔节点为nil, 父级节点是爷爷左子节点: 
	       - n节点在父级的左侧, 把爷爷节点跟父级节点进行右旋转并变换颜色, 结束.(一步, 变色)
	       - n节点在父级的右侧, 先把父级节点跟n节点进行左旋转, 然后把爷爷节点跟新的左子节点进行右旋转并变换颜色, 结束.(变色, 两步, 变色)

	条件2: 如果两个连续的子节点都为红色且叔叔节点为nil, 父级节点是爷爷右子节点: 
	       - n节点在父级的右侧, 把爷爷节点跟父级节点进行左旋转并变换颜色, 结束.(一步, 变色)
	       - n节点在父级的左侧, 先把父级节点跟n节点进行右旋转, 然后把爷爷节点跟新的右子节点进行左旋转并变换颜色, 结束.(变色, 两步, 变色)

	条件3: 如果两个连续的子节点都为红色且叔叔节点为红色: 
	       - 先用变色规则(这时必然会出现爷爷节点与太爷爷节点都为红色, 爷爷的兄弟节点为黑色的情况):
		   - 如果爷爷节点是太爷爷节点的左节点:
			1 先把爷爷节点跟太爷爷节点进行右旋转.
		        2 再把爷爷节点与它的上级节点进行左旋转并变换颜色, 结束.(两步旋转, 变色)
		   - 如果爷爷节点是太爷爷节点的右节点:
			1 把太爷爷节点与它的上级节点进行左旋转.
			2 变换颜色, 结束.(一步旋转, 变色)

	最后: 判断调整完后上级节点是否为空, 不为空则把父级节点连接到爷爷上级节点, 形成新的完整路径.


红黑树删除规则(假设要删除节点为:w):
 - 条件1: 如果w节点的左右节点都为nil, 那么直接把上级的对应w节点位置设置为nil.
 - 条件2: 如果w节点为黑色或红色且左节点为nil, 那么把w节点右子节点值替换为w节点值, 并把w节点的右子节点设置为nil.
 - 条件3: 如果w节点父级节点跟子节点为红色
	   - 如果w节点是父级节点的左子节点, 那把w的子节点连接到父级左子节点, 并变为黑色.
	   - 如果w节点是父级节点的右子节点, 那把w的子节点连接到父级右子节点, 并变为黑色.
 - 条件4: 如果w节点为红或黑色且左节点不为nil, 那么把w节点的左子节点的下面的最大值替换为w节点值
           - 如果最大值节点为黑色且兄弟节点也为黑色且上级为红色, 那么在删除最大值节点后, 需要进行右旋转调整.
           - 如果最大值节点的左子节点不为nil, 那么把左子节点连接到w节点的右子节点, 并变为黑色.
